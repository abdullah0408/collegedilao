generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HomePageCity {
  id       Int    @id @default(autoincrement())
  name     String @unique
  count    Int
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomePageHeroImage {
  id       Int    @id @default(autoincrement())
  image    String
  title    String
  subtitle String
  ctaText  String
  url      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomePageStat {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomePageUniversityLogo {
  id   Int    @id @default(autoincrement())
  name String
  logo String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomePageYouTubeShort {
  id       Int    @id @default(autoincrement())
  videoUrl String
  title    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SectionName {
  CITIES
  HERO_BANNER
  STATS
  UNIVERSITY_MARQUEE
  YOUTUBE_SHORTS
}

model HomePageSectionToggle {
  section  SectionName @id
  isActive Boolean     @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model User {
  id                 String  @id @default(cuid())
  clerkUserId        String  @unique
  fullName           String
  phoneNumber        String  @unique @db.VarChar(15)
  cityOfResidence    String?
  email              String  @unique
  courseInterestedIn String?
  isDistanceLearning Boolean @default(false)
  levelLookingFor    String?

  role              String  @default("user")
  profilePictureUrl String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EntityTypeLookup {
  code     String   @id // "UNIVERSITY", "COLLEGE", etc.
  entities Entity[]
}

model OwnershipTypeLookup {
  code     String   @id // "GOVERNMENT", "PRIVATE", etc.
  entities Entity[]
}

enum GenderAccepted {
  GIRLS
  BOYS
  COED
}

model CityLookup {
  id       Int         @id @default(autoincrement())
  name     String
  state    StateLookup @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId  Int
  entities Entity[]    @relation("EntityCity")
}

model StateLookup {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  cities   CityLookup[]
  entities Entity[]     @relation("EntityState")
}

model Entity {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  slug              String              @unique
  type              EntityTypeLookup    @relation(fields: [typeCode], references: [code], onDelete: Cascade)
  typeCode          String
  ownershipType     OwnershipTypeLookup @relation(fields: [ownershipTypeCode], references: [code], onDelete: Cascade)
  ownershipTypeCode String
  establishedYear   Int
  area              Int?
  genderAccepted    GenderAccepted

  address String?
  city    CityLookup  @relation("EntityCity", fields: [cityId], references: [id], onDelete: Cascade)
  cityId  Int
  state   StateLookup @relation("EntityState", fields: [stateId], references: [id], onDelete: Cascade)
  stateId Int
  pincode String?
  country String      @default("India")

  website   String   @db.VarChar(2083)
  instagram String?
  facebook  String?
  twitter   String?
  linkedin  String?
  phone     String[]
  email     String[]

  logo           String? @default("default-logo.png")
  banner         String? @default("default-banner.png")
  brochure       String?
  hostelBrochure String?
  naacGrade      String?
  nirfRank       Int?
  info           String?
  description    String

  avgFee     Int?
  avgPackage Int?

  approvals EntityApproval[] @relation("EntityApprovals")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EntityApproval {
  id               Int                @id @default(autoincrement())
  entity           Entity             @relation("EntityApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  entityId         Int
  approvalBody     ApprovalBodyLookup @relation(fields: [approvalBodyCode], references: [code], onDelete: Cascade)
  approvalBodyCode String
  grade            String?
}

model ApprovalBodyLookup {
  code      String           @id // "AICTE", "UGC", etc.
  approvals EntityApproval[]
}
